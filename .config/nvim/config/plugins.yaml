---
# PLUGINS
# ==========================================

# Startup
# -------
# NOTE: Experimental
- repo: wellle/targets.vim
- repo: tpope/vim-commentary
# - repo: haya14busa/vim-gtrans # TODO: fix nvim compat
- repo: szw/vim-g
# END Experimental
- repo: Shougo/dein.vim
- repo: rafi/awesome-vim-colorschemes
- repo: rafi/vim-blocks
- repo: thinca/vim-localrc
- repo: tpope/vim-sleuth
- repo: itchyny/vim-gitbranch
- repo: itchyny/vim-parenmatch
- repo: itchyny/vim-cursorword
  hook_add: |
    autocmd MyAutoCmd FileType denite,qf,nerdtree let b:cursorword=0
    autocmd MyAutoCmd InsertEnter * let b:cursorword=0
    autocmd MyAutoCmd InsertLeave * let b:cursorword=1

# Lazy Loading
# ==========================================

# EXPERIMENTAL
- {repo: szw/vim-maximizer, on_cmd: MaximizerToggle}
- {repo: Shougo/deol.nvim, on_cmd: Deol}
# Languages
# ---------
- {repo: pearofducks/ansible-vim, on_ft: ansible}
- {repo: hail2u/vim-css3-syntax, on_ft: css}
- {repo: othree/csscomplete.vim, on_ft: css}
- {repo: groenewege/vim-less, on_ft: less}
- {repo: mitsuhiko/vim-jinja, on_ft: [htmljinja, jinja]}
- {repo: mustache/vim-mustache-handlebars, on_ft: html}

- repo: othree/html5.vim
  on_ft: html
  hook_add: |
    let g:html5_event_handler_attributes_complete = 0
    let g:html5_rdfa_attributes_complete = 0
    let g:html5_microdata_attributes_complete = 0
    let g:html5_aria_attributes_complete = 0

- repo: plasticboy/vim-markdown
  on_ft: markdown
  depends: tabular
  hook_source: |
    let g:vim_markdown_initial_foldlevel = 5
    let g:vim_markdown_new_list_item_indent = 2
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_conceal = 0
- {repo: godlygeek/tabular}

- repo: rhysd/vim-gfm-syntax
  depends: vim-markdown
  on_ft: markdown
  hook_source: |
    let g:gfm_syntax_enable_always = 0
    let g:gfm_syntax_highlight_emoji = 0
    let g:gfm_syntax_enable_filetypes = ['markdown']

- {repo: pangloss/vim-javascript, on_ft: javascript}
- {repo: othree/jspc.vim, on_ft: javascript}
- {repo: MaxMEllon/vim-jsx-pretty, on_ft: javascript}
- {repo: heavenshell/vim-jsdoc, on_ft: javascript}
- {repo: moll/vim-node, on_ft: javascript}
- {repo: elzr/vim-json, on_ft: json}

- {repo: vim-python/python-syntax, on_ft: python}
- {repo: Vimjas/vim-python-pep8-indent, on_ft: python}
- {repo: python_match.vim, on_ft: python}

- {repo: chrisbra/csv.vim, on_ft: csv}
- {repo: cespare/vim-toml, on_ft: toml}
- {repo: ekalinin/Dockerfile.vim, on_ft: [Dockerfile, docker-compose]}
- {repo: tpope/vim-git, on_ft: [gitcommit, gitrebase, gitconfig]}


# tweekmonster/impsort.vim
# lambdalisue/gina.vim
# lambdalisue/vim-gista


# ==========================================
# Commands
# --------

# Experimental
# - repo: dpelle/vim-LanguageTool
#- repo: $HOME/repos/vim-LanguageTool
- repo: arubertoson/vim-LanguageTool
  on_cmd: [LanguageToolCheck, LanguageToolClear]
  hook_add: |
    let g:languagetool_java = 'languagetool'
    let g:languagetool_lang = 'en-US'

- repo: w0rp/ale
  on_event: BufEnter
  hook_add: |
    let g:ale_sign_error = '>>'
    let g:ale_sign_warning = '--'
    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']


- {repo: kannokanno/previm, on_cmd: PrevimOpen, depends: open-browser.vim}
- {repo: tyru/open-browser.vim}
- {repo: reedes/vim-wordy, on_cmd: [Wordy, NextWordy, PrevWordy]}
- {repo: thinca/vim-prettyprint, on_cmd: PP, on_func: PP}
- {repo: metakirby5/codi.vim, on_cmd: Codi, if: empty($VIM_MINIMAL)}
- {repo: mbbill/undotree, on_cmd: UndotreeToggle}

- {repo: kana/vim-niceblock, on_map: {x: <Plug>}}
- {repo: Shougo/vimproc.vim, build: make, on_func: vimproc#}

- repo: kien/tabman.vim
  if: empty($VIM_MINIMAL)
  on_map: {n: <Plug>}
  hook_add: |
    let g:loaded_tabman = 1
    nnoremap <Plug>Tabman :call tabman#toggle()<CR>

- repo: majutsushi/tagbar
  if: empty($VIM_MINIMAL)
  on_cmd: TagbarToggle
  hook_source: |
    let g:tagbar_width = 40
    if executable('jsctags')
      let g:tagbar_type_javascript = { 'ctagsbin': 'jsctags' }
    endif

- repo: beloglazov/vim-online-thesaurus
  if: empty($VIM_MINIMAL)
  on_cmd: [OnlineThesaurusCurrentWord, Thesaurus]
  hook_source: let g:online_thesaurus_map_keys = 0

# ==========================================
# Interface
# ---------
- {repo: rhysd/accelerated-jk, on_map: {n: <Plug>}}

- repo: junegunn/goyo.vim
  if: empty($VIM_MINIMAL)
  depends: limelight.vim
  on_cmd: Goyo
  hook_source: source $VIMPATH/config/plugins/goyo.vim

- repo: junegunn/limelight.vim
  if: empty($VIM_MINIMAL)
  on_cmd: Limelight

- repo: haya14busa/incsearch.vim
  on_map: {n: <Plug>}
  hook_add: |
    let g:incsearch#auto_nohlsearch = 1

- repo: airblade/vim-gitgutter
  on_path: .*
  hook_source: |
    let g:gitgutter_map_keys = 0
    let g:gitgutter_sh = $SHELL

- repo: nathanaelkane/vim-indent-guides
  on_cmd: [ IndentGuidesEnable, IndentGuidesDisable, IndentGuidesToggle ]
  hook_post_source: |
    call indent_guides#init_script_vars()
    call indent_guides#highlight_colors()
  hook_add: |
    let g:indent_guides_color_change_percent = 3
    let g:indent_guides_autocmds_enabled = 0
    let g:indent_guides_default_mapping = 0
    let g:indent_guides_guide_size = 1
    let g:indent_guides_indent_levels = 15
    let g:custom_exclude = [ 'help', 'denite', 'codi' ]
    autocmd MyAutoCmd BufEnter *
      \ if ! empty(&l:filetype) && index(g:custom_exclude, &l:filetype) == -1
      \|   if g:indent_guides_autocmds_enabled == 0 && &l:expandtab
      \|     IndentGuidesEnable
      \|   elseif g:indent_guides_autocmds_enabled == 1 && ! &l:expandtab
      \|     IndentGuidesDisable
      \|   endif
      \| endif

- repo: MattesGroeger/vim-bookmarks
  on_path: .*
  hook_source: |
    let g:bookmark_auto_save_file = $VARPATH.'/bookmarks'
    let g:bookmark_no_default_key_mappings = 1
    let g:bookmark_disable_ctrlp = 1

- repo: rhysd/committia.vim
  on_path: COMMIT_EDITMSG
  hook_source: let g:committia_min_window_width = 70


# ==========================================
# Denite
# ---------

- repo: Shougo/denite.nvim   # denite
  on_cmd: Denite
  hook_source: source $VIMPATH/config/plugins/denite.vim
  hook_add: |
    let g:project_folders = ['/storage/dev', '$HOME/projects']

- { repo: chemzqm/unite-location, on_source: denite.nvim }


# ==========================================
# Operators
# ---------
- { repo: kana/vim-operator-user, lazy: 1 }

- repo: kana/vim-operator-replace
  depends: vim-operator-user
  on_map: { vnx: <Plug> }

- repo: rhysd/vim-operator-surround
  depends: [ vim-operator-user, vim-textobj-multiblock ]
  on_map: { vnx: <Plug> }

- repo: haya14busa/vim-operator-flashy
  depends: vim-operator-user
  on_map: { nx: <Plug> }

    
# ==========================================
# Text objects
# ------------
- { repo: kana/vim-textobj-user, on_func: textobj#user# }
- { repo: bkad/CamelCaseMotion, on_map: { nox: <Plug>CamelCaseMotion }}
- { repo: terryma/vim-expand-region, on_map: { x: <Plug> }}
- { repo: AndrewRadev/sideways.vim, on_map: { ox: <Plug>Sideways }}
- { repo: AndrewRadev/splitjoin.vim, on_map: { n: <plug>Splitjoin }}
- { repo: AndrewRadev/linediff.vim, on_cmd: Linediff }

- repo: AndrewRadev/dsf.vim
  on_map: { n: <Plug>Dsf }
  hook_add: let g:dsf_no_mappings = 1

- repo: osyo-manga/vim-textobj-multiblock
  depends: vim-textobj-user
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_multiblock_no_default_key_mappings = 1

- repo: kana/vim-textobj-function
  depends: vim-textobj-user
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_function_no_default_key_mappings = 1


# ==========================================
# Completion
# ----------
- repo: Shougo/deoplete.nvim
  depends: context_filetype.vim
  if: has('nvim') && empty($VIM_MINIMAL)
  on_i: 1
  hook_add: let g:deoplete#enable_at_startup = 1
  hook_source: source $VIMPATH/config/plugins/deoplete.vim

- repo: Shougo/neocomplete
  depends: context_filetype.vim
  if: ! has('nvim') && has('lua') && empty($VIM_MINIMAL)
  on_event: InsertEnter
  hook_add: |
    let g:neocomplete#data_directory = $VARPATH.'/complete'
    let g:neocomplete#enable_at_startup = 1
  hook_source: source $VIMPATH/config/plugins/neocomplete.vim

- repo: Shougo/neosnippet.vim
  depends: [neosnippet-snippets, context_filetype.vim]
  if: empty($VIM_MINIMAL)
  on_event: InsertCharPre
  on_ft: snippet
  hook_add: let g:neosnippet#data_directory = $VARPATH.'/snippets'
  hook_source: |
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#expand_word_boundary = 1
    autocmd MyAutoCmd InsertLeave * NeoSnippetClearMarkers

- repo: ludovicchabant/vim-gutentags
  if: executable('ctags') && empty($VIM_MINIMAL)
  on_path: .*
  hook_add: |
    let g:gutentags_cache_dir = $VARPATH.'/tags'
    let g:gutentags_generate_on_write = 1
    let g:gutentags_generate_on_missing = 0
    let g:gutentags_generate_on_new = 0

- repo: mattn/emmet-vim
  if: empty($VIM_MINIMAL)
  on_i: 1
  on_ft: [html, css, jsx, javascript, javascript.jsx]
  hook_source: |
    let g:use_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'
    source $VIMPATH/config/plugins/emmet.vim

- repo: Shougo/echodoc.vim
  if: empty($VIM_MINIMAL)
  on_event: CompleteDone
  hook_post_source: call echodoc#enable()

- {repo: jiangmiao/auto-pairs, if: empty($VIM_MINIMAL)}
- {repo: Shougo/neosnippet-snippets, if: empty($VIM_MINIMAL)}
- {repo: Shougo/context_filetype.vim, lazy: 1, if: empty($VIM_MINIMAL)}
- {repo: Shougo/neco-vim, on_ft: vim, if: empty($VIM_MINIMAL)}
- {repo: Shougo/neco-syntax, on_source: [neocomplete.vim, deoplete.nvim]}
- {repo: nixprime/cpsm, build: install.sh, on_source: denite.nvim}

- repo: davidhalter/jedi-vim
  if: empty($VIM_MINIMAL)
  on_ft: python
  hook_add: |
    let g:jedi#completions_enabled = 0
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#smart_auto_mappings = 0
    let g:jedi#show_call_signatures = 1
    let g:jedi#auto_clode_doc = 1
    let g:jedi#rename_command = "<Leader>gR"
    let g:jedi#usages_command = "<Leader>gu"
    let g:jedi#goto_command = "<Leader>gg"
    let g:jedi#documentation_command = "<Leader>_K"
  hook_source: |
    let g:jedi#use_tag_stack = 0
    let g:jedi#popup_select_first = 0
    let g:jedi#popup_on_dot = 0
    let g:jedi#max_doc_height = 100
    let g:jedi#quickfix_window_height = 10
    let g:jedi#use_splits_not_buffers = 'right'

# Only NeoVim ------------------------------
- repo: zchee/deoplete-jedi
  if: has('nvim') && empty($VIM_MINIMAL)
  on_ft: python
  on_i: 1
  hook_source: autocmd MyAutoCmd FileType python setlocal omnifunc=

- repo: carlitux/deoplete-ternjs
  build: npm install -g tern
  if: executable('npm') && has('nvim') && empty($VIM_MINIMAL)
  on_i: 1
  on_ft: javascript
  hook_source: |
    let g:tern_request_timeout = 1
    let g:tern_show_signature_in_pum = '0'

# Only Vim ---------------------------------
- repo: ternjs/tern_for_vim
  build: npm install
  if: executable('npm') && ! has('nvim') && empty($VIM_MINIMAL)
  on_i: 1
  on_ft: javascript
  hook_add: let g:tern_show_signature_in_pum = 1
  hook_post_source:
    autocmd MyAutoCmd FileType javascript setlocal omnifunc=tern#Complete
